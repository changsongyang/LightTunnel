import java.text.SimpleDateFormat
import java.util.zip.GZIPOutputStream

buildscript {
    ext.kotlin_version = "1.4.21"
    ext.jvm_version = "1.8"
    ext.netty_version = "4.1.58.Final"
    ext.BUILD_DATE = new SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy ZZZ", Locale.ENGLISH).format(new Date())
    extensions.GitVCPlugin = [
            enableBranch: true,
    ]
    repositories {
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://maven.aliyun.com/repository/google" }
        maven { url "https://maven.aliyun.com/repository/jcenter" }
        maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.tuuzed.gradle.plugin:gitvc:0.2.3"
        classpath "edu.sc.seis.launch4j:launch4j:2.4.6"
        classpath "gradle.plugin.de.fuerstenau:BuildConfigPlugin:1.1.8"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
    allprojects {
        repositories {
            maven { url "https://maven.aliyun.com/repository/public" }
            maven { url "https://maven.aliyun.com/repository/google" }
            maven { url "https://maven.aliyun.com/repository/jcenter" }
            mavenCentral()
            jcenter()
        }
        tasks.withType(JavaCompile) {
            options.encoding = "UTF-8"
        }
    }
}

apply plugin: "gitvc-gradle-plugin"

group "lighttunnel"
version GitVC.VERSION_NAME.toUpperCase()


static String string(Object o) { return "\"" + o + "\"" }

static String base64File(File file) {
    return base64File(file, false)
}
// 将文件转成base64字符串数组
static String base64File(File file, boolean zip) {
    if (!file.exists()) {
        return "new java.lang.String[]{}"
    }
    byte[] data = file.readBytes()
    if (zip) {
        ByteArrayOutputStream buffer = new ByteArrayOutputStream()
        GZIPOutputStream zipStream
        zipStream = new GZIPOutputStream(buffer)
        zipStream.write(data)
        zipStream.close()
        data = buffer.toByteArray()
    }
    final String text = new String(Base64.encoder.encode(data), "UTF-8")
    final List<String> list = new ArrayList<>()
    final chunkSize = 65534
    StringBuilder tmp = new StringBuilder(chunkSize)
    for (int i = 1; i <= text.length(); i++) {
        tmp.append(text.charAt(i - 1))
        if (i % chunkSize == 0) {
            list.add(tmp.toString())
            tmp = new StringBuilder(chunkSize)
        }
    }
    if (tmp.length() != 0) {
        list.add(tmp.toString())
    }
    StringBuilder sb = new StringBuilder(text.length())
    sb.append("new java.lang.String[]{\n\"")
    sb.append(list.join("\",\n\""))
    sb.append("\"\n}")
    return sb.toString()
}

